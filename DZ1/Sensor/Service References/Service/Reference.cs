//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sensor.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserAddress", Namespace="http://schemas.datacontract.org/2004/07/WebService")]
    [System.SerializableAttribute()]
    public partial class UserAddress : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPaddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UserExistsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPaddress {
            get {
                return this.IPaddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPaddressField, value) != true)) {
                    this.IPaddressField = value;
                    this.RaisePropertyChanged("IPaddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UserExists {
            get {
                return this.UserExistsField;
            }
            set {
                if ((this.UserExistsField.Equals(value) != true)) {
                    this.UserExistsField = value;
                    this.RaisePropertyChanged("UserExists");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IWebService")]
    public interface IWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/register", ReplyAction="http://tempuri.org/IWebService/registerResponse")]
        bool register(string username, double latitude, double longitude, string IPaddress, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/register", ReplyAction="http://tempuri.org/IWebService/registerResponse")]
        System.Threading.Tasks.Task<bool> registerAsync(string username, double latitude, double longitude, string IPaddress, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/searchNeighbour", ReplyAction="http://tempuri.org/IWebService/searchNeighbourResponse")]
        Sensor.Service.UserAddress searchNeighbour(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/searchNeighbour", ReplyAction="http://tempuri.org/IWebService/searchNeighbourResponse")]
        System.Threading.Tasks.Task<Sensor.Service.UserAddress> searchNeighbourAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/storeMeasurement", ReplyAction="http://tempuri.org/IWebService/storeMeasurementResponse")]
        bool storeMeasurement(string username, string parameter, float averageValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/storeMeasurement", ReplyAction="http://tempuri.org/IWebService/storeMeasurementResponse")]
        System.Threading.Tasks.Task<bool> storeMeasurementAsync(string username, string parameter, float averageValue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebServiceChannel : Sensor.Service.IWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceClient : System.ServiceModel.ClientBase<Sensor.Service.IWebService>, Sensor.Service.IWebService {
        
        public WebServiceClient() {
        }
        
        public WebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool register(string username, double latitude, double longitude, string IPaddress, int port) {
            return base.Channel.register(username, latitude, longitude, IPaddress, port);
        }
        
        public System.Threading.Tasks.Task<bool> registerAsync(string username, double latitude, double longitude, string IPaddress, int port) {
            return base.Channel.registerAsync(username, latitude, longitude, IPaddress, port);
        }
        
        public Sensor.Service.UserAddress searchNeighbour(string username) {
            return base.Channel.searchNeighbour(username);
        }
        
        public System.Threading.Tasks.Task<Sensor.Service.UserAddress> searchNeighbourAsync(string username) {
            return base.Channel.searchNeighbourAsync(username);
        }
        
        public bool storeMeasurement(string username, string parameter, float averageValue) {
            return base.Channel.storeMeasurement(username, parameter, averageValue);
        }
        
        public System.Threading.Tasks.Task<bool> storeMeasurementAsync(string username, string parameter, float averageValue) {
            return base.Channel.storeMeasurementAsync(username, parameter, averageValue);
        }
    }
}
