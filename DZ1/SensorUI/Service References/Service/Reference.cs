//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SensorUI.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IWebService")]
    public interface IWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/register", ReplyAction="http://tempuri.org/IWebService/registerResponse")]
        bool register(string username, double latitude, double longitude, string IPaddress, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/register", ReplyAction="http://tempuri.org/IWebService/registerResponse")]
        System.Threading.Tasks.Task<bool> registerAsync(string username, double latitude, double longitude, string IPaddress, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/searchNeighbour", ReplyAction="http://tempuri.org/IWebService/searchNeighbourResponse")]
        Sensor.Service.UserAddress searchNeighbour(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/searchNeighbour", ReplyAction="http://tempuri.org/IWebService/searchNeighbourResponse")]
        System.Threading.Tasks.Task<Sensor.Service.UserAddress> searchNeighbourAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/storeMeasurement", ReplyAction="http://tempuri.org/IWebService/storeMeasurementResponse")]
        bool storeMeasurement(string username, string parameter, float averageValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/storeMeasurement", ReplyAction="http://tempuri.org/IWebService/storeMeasurementResponse")]
        System.Threading.Tasks.Task<bool> storeMeasurementAsync(string username, string parameter, float averageValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/sensorOffline", ReplyAction="http://tempuri.org/IWebService/sensorOfflineResponse")]
        void sensorOffline(string IPaddress, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/sensorOffline", ReplyAction="http://tempuri.org/IWebService/sensorOfflineResponse")]
        System.Threading.Tasks.Task sensorOfflineAsync(string IPaddress, int port);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebServiceChannel : SensorUI.Service.IWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceClient : System.ServiceModel.ClientBase<SensorUI.Service.IWebService>, SensorUI.Service.IWebService {
        
        public WebServiceClient() {
        }
        
        public WebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool register(string username, double latitude, double longitude, string IPaddress, int port) {
            return base.Channel.register(username, latitude, longitude, IPaddress, port);
        }
        
        public System.Threading.Tasks.Task<bool> registerAsync(string username, double latitude, double longitude, string IPaddress, int port) {
            return base.Channel.registerAsync(username, latitude, longitude, IPaddress, port);
        }
        
        public Sensor.Service.UserAddress searchNeighbour(string username) {
            return base.Channel.searchNeighbour(username);
        }
        
        public System.Threading.Tasks.Task<Sensor.Service.UserAddress> searchNeighbourAsync(string username) {
            return base.Channel.searchNeighbourAsync(username);
        }
        
        public bool storeMeasurement(string username, string parameter, float averageValue) {
            return base.Channel.storeMeasurement(username, parameter, averageValue);
        }
        
        public System.Threading.Tasks.Task<bool> storeMeasurementAsync(string username, string parameter, float averageValue) {
            return base.Channel.storeMeasurementAsync(username, parameter, averageValue);
        }
        
        public void sensorOffline(string IPaddress, int port) {
            base.Channel.sensorOffline(IPaddress, port);
        }
        
        public System.Threading.Tasks.Task sensorOfflineAsync(string IPaddress, int port) {
            return base.Channel.sensorOfflineAsync(IPaddress, port);
        }
    }
}
